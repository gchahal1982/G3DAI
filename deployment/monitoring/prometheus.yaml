apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: g3d-ai-services
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'g3d-ai-services'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # API Gateway metrics
      - job_name: 'api-gateway'
        static_configs:
          - targets: ['api-gateway-service:3000']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D Vision Pro metrics
      - job_name: 'vision-pro'
        static_configs:
          - targets: ['vision-pro-service:3001']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # G3D CodeForge metrics
      - job_name: 'codeforge'
        static_configs:
          - targets: ['codeforge-service:3002']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D Creative Studio metrics
      - job_name: 'creative-studio'
        static_configs:
          - targets: ['creative-studio-service:3003']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # G3D DataForge metrics
      - job_name: 'dataforge'
        static_configs:
          - targets: ['dataforge-service:3004']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D SecureAI metrics
      - job_name: 'secureai'
        static_configs:
          - targets: ['secureai-service:3005']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D AutoML metrics
      - job_name: 'automl'
        static_configs:
          - targets: ['automl-service:3006']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # G3D ChatBuilder metrics
      - job_name: 'chatbuilder'
        static_configs:
          - targets: ['chatbuilder-service:3007']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D VideoAI metrics
      - job_name: 'videoai'
        static_configs:
          - targets: ['videoai-service:3008']
        metrics_path: '/metrics'
        scrape_interval: 20s
        scrape_timeout: 15s

      # G3D FinanceAI metrics
      - job_name: 'financeai'
        static_configs:
          - targets: ['financeai-service:3009']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D HealthAI metrics
      - job_name: 'healthai'
        static_configs:
          - targets: ['healthai-service:3010']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # G3D VoiceAI metrics
      - job_name: 'voiceai'
        static_configs:
          - targets: ['voiceai-service:3011']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # G3D TranslateAI metrics
      - job_name: 'translateai'
        static_configs:
          - targets: ['translateai-service:3012']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D DocuMind metrics
      - job_name: 'documind'
        static_configs:
          - targets: ['documind-service:3013']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # G3D Mesh3D metrics
      - job_name: 'mesh3d'
        static_configs:
          - targets: ['mesh3d-service:3014']
        metrics_path: '/metrics'
        scrape_interval: 20s
        scrape_timeout: 15s

      # G3D EdgeAI metrics
      - job_name: 'edgeai'
        static_configs:
          - targets: ['edgeai-service:3015']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s

      # G3D LegalAI metrics
      - job_name: 'legalai'
        static_configs:
          - targets: ['legalai-service:3016']
        metrics_path: '/metrics'
        scrape_interval: 15s
        scrape_timeout: 10s

      # Kubernetes metrics
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  alerts.yml: |
    groups:
      - name: g3d-ai-services
        rules:
          # High error rate alerts
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "High error rate detected"
              description: "Service {{ $labels.job }} has error rate above 10% for more than 2 minutes"

          # High response time alerts
          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "Service {{ $labels.job }} has 95th percentile response time above 1 second"

          # Service down alerts
          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service is down"
              description: "Service {{ $labels.job }} has been down for more than 1 minute"

          # High CPU usage alerts
          - alert: HighCPUUsage
            expr: rate(process_cpu_seconds_total[5m]) * 100 > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "Service {{ $labels.job }} CPU usage is above 80% for more than 5 minutes"

          # High memory usage alerts
          - alert: HighMemoryUsage
            expr: process_resident_memory_bytes / 1024 / 1024 > 1000
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Service {{ $labels.job }} memory usage is above 1GB for more than 5 minutes"

          # AI model inference alerts
          - alert: HighAIInferenceTime
            expr: histogram_quantile(0.95, rate(ai_inference_duration_seconds_bucket[5m])) > 10
            for: 3m
            labels:
              severity: warning
            annotations:
              summary: "High AI inference time detected"
              description: "Service {{ $labels.job }} AI inference time is above 10 seconds"

          # Rate limiting alerts
          - alert: RateLimitExceeded
            expr: rate(rate_limit_exceeded_total[5m]) > 10
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "Rate limit exceeded"
              description: "Service {{ $labels.job }} rate limit exceeded more than 10 times per second"

          # Database connection alerts
          - alert: DatabaseConnectionError
            expr: rate(database_connection_errors_total[5m]) > 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Database connection errors"
              description: "Service {{ $labels.job }} experiencing database connection errors"

          # GPU utilization alerts (for GPU-enabled services)
          - alert: HighGPUUtilization
            expr: gpu_utilization_percent > 95
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "High GPU utilization"
              description: "Service {{ $labels.job }} GPU utilization above 95% for more than 10 minutes"

          # Disk space alerts
          - alert: LowDiskSpace
            expr: (node_filesystem_avail_bytes / node_filesystem_size_bytes) * 100 < 10
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Low disk space"
              description: "Disk space on {{ $labels.instance }} is below 10%"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: g3d-ai-services
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: g3d-ai-services
  labels:
    app: prometheus
spec:
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: prometheus

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: g3d-ai-services

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: g3d-ai-services

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: g3d-ai-services
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd