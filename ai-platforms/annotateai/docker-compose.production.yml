version: '3.8'

services:
  # ======================================
  # AnnotateAI Application
  # ======================================
  annotateai:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-1.0.0}
        NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
        NEXT_PUBLIC_API_URL: ${API_URL}
        NEXT_PUBLIC_WS_URL: ${WS_URL}
    image: annotateai/platform:${APP_VERSION:-1.0.0}
    container_name: annotateai-app
    restart: unless-stopped
    
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      
      # Database
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      
      # External Services
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: production
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # Features
      ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}
      ENABLE_COLLABORATION: ${ENABLE_COLLABORATION:-true}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-100MB}
      
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp:/app/temp
      
    ports:
      - "3000:3000"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      
    networks:
      - annotateai-network
      
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
      
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          
    security_opt:
      - no-new-privileges:true
      
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/temp:noexec,nosuid,size=500m
      
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ======================================
  # PostgreSQL Database
  # ======================================
  postgres:
    image: postgres:15-alpine
    container_name: annotateai-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-annotateai}
      POSTGRES_USER: ${POSTGRES_USER:-annotateai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth=scram-sha-256"
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
      
    ports:
      - "5432:5432"
      
    networks:
      - annotateai-network
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-annotateai} -d ${POSTGRES_DB:-annotateai}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
          
    security_opt:
      - no-new-privileges:true
      
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ======================================
  # Redis Cache & Sessions
  # ======================================
  redis:
    image: redis:7-alpine
    container_name: annotateai-redis
    restart: unless-stopped
    
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      
    ports:
      - "6379:6379"
      
    networks:
      - annotateai-network
      
    command: ["redis-server", "/usr/local/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD}"]
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
          
    security_opt:
      - no-new-privileges:true
      
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "3"

  # ======================================
  # Nginx Reverse Proxy
  # ======================================
  nginx:
    image: nginx:alpine
    container_name: annotateai-nginx
    restart: unless-stopped
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./uploads:/var/www/uploads:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      
    ports:
      - "80:80"
      - "443:443"
      
    depends_on:
      - annotateai
      
    networks:
      - annotateai-network
      
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
          
    security_opt:
      - no-new-privileges:true
      
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ======================================
  # WebSocket Server (Real-time Collaboration)
  # ======================================
  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    image: annotateai/websocket:${APP_VERSION:-1.0.0}
    container_name: annotateai-websocket
    restart: unless-stopped
    
    environment:
      NODE_ENV: production
      PORT: 3001
      REDIS_URL: ${REDIS_URL}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${NEXTAUTH_SECRET}
      
    ports:
      - "3001:3001"
      
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      
    networks:
      - annotateai-network
      
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
          
    security_opt:
      - no-new-privileges:true
      
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ======================================
  # Background Job Processor
  # ======================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    image: annotateai/worker:${APP_VERSION:-1.0.0}
    container_name: annotateai-worker
    restart: unless-stopped
    
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET}
      SENTRY_DSN: ${SENTRY_DSN}
      
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./logs:/app/logs
      
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      
    networks:
      - annotateai-network
      
    healthcheck:
      test: ["CMD", "node", "worker-health.js"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1G
          
    security_opt:
      - no-new-privileges:true
      
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ======================================
  # Monitoring & Observability
  # ======================================
  prometheus:
    image: prom/prometheus:latest
    container_name: annotateai-prometheus
    restart: unless-stopped
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
      
    ports:
      - "9090:9090"
      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      
    networks:
      - annotateai-network
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: annotateai-grafana
    restart: unless-stopped
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${GRAFANA_URL}
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      
    ports:
      - "3001:3000"
      
    depends_on:
      - prometheus
      
    networks:
      - annotateai-network
      
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# ======================================
# Networks
# ======================================
networks:
  annotateai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ======================================
# Volumes
# ======================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
      
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
      
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus
      
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/grafana
      
  nginx_cache:
    driver: local
    
  nginx_logs:
    driver: local

# ======================================
# Production Deployment Notes
# ======================================
# 
# 1. Environment Variables:
#    Copy .env.production.example to .env.production and configure all required variables
#
# 2. SSL Certificates:
#    Place SSL certificates in ./ssl/ directory
#    - fullchain.pem
#    - privkey.pem
#
# 3. Database Initialization:
#    Place SQL initialization scripts in ./database/init/
#
# 4. Nginx Configuration:
#    Configure ./nginx/nginx.conf and ./nginx/conf.d/ for your domain
#
# 5. Monitoring Setup:
#    Configure Prometheus and Grafana in ./monitoring/
#
# 6. Data Persistence:
#    Set DATA_PATH environment variable to persistent storage location
#
# 7. Scaling:
#    Use Docker Swarm or Kubernetes for production scaling
#
# 8. Security:
#    - All services run as non-root users
#    - Network isolation with custom bridge network
#    - Read-only containers where possible
#    - Resource limits configured
#    - Security options enabled
#
# 9. Backup:
#    Schedule regular backups of postgres_data, redis_data, and uploads
#
# 10. Updates:
#     Use rolling updates with health checks to minimize downtime 