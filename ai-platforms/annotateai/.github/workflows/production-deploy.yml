name: AnnotateAI Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: annotateai
  KUBERNETES_NAMESPACE: annotateai-prod
  KUBECONFIG_PATH: ~/.kube/config

jobs:
  # Security and code quality checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run Semgrep SAST scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: annotateai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install poetry
        poetry install

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/annotateai_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --maxfail=5
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/annotateai_test
        REDIS_URL: redis://localhost:6379

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml

  # Build and push Docker images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: 
          - api-gateway
          - auth-service
          - ai-model-service
          - collaboration-service
          - storage-service
          - asset-processor
          - clip-service
          - tracking-service
          - medical-imaging-service
          - pointcloud-service
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install performance testing tools
      run: |
        pip install locust pytest-benchmark

    - name: Run load tests
      run: |
        # Start services for testing (simplified)
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
        # Run load tests
        locust -f tests/load/load_test_suite.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000
        
        # Cleanup
        docker-compose -f docker-compose.test.yml down

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: locust-report.html

  # Deploy to staging for validation
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging-api.annotateai.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name annotateai-staging

    - name: Deploy to staging
      run: |
        # Update image tags in staging manifests
        export IMAGE_TAG=${{ github.sha }}
        envsubst < deployment/kubernetes/staging/annotateai-staging.yaml | kubectl apply -f -

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/api-gateway -n annotateai-staging --timeout=600s
        kubectl rollout status deployment/auth-service -n annotateai-staging --timeout=600s

    - name: Run smoke tests
      run: |
        sleep 60  # Wait for services to be ready
        python tests/smoke_tests.py --environment staging

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://api.annotateai.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name annotateai-production

    - name: Create backup
      run: |
        # Backup current deployment
        kubectl get deployment -n annotateai-prod -o yaml > backup-deployments-$(date +%Y%m%d-%H%M%S).yaml
        
        # Backup database
        kubectl exec -n annotateai-prod postgres-0 -- pg_dump -U annotateai annotateai > backup-db-$(date +%Y%m%d-%H%M%S).sql

    - name: Deploy to production with blue-green strategy
      run: |
        # Tag for production
        export IMAGE_TAG=${GITHUB_REF#refs/tags/}
        
        # Apply blue-green deployment
        envsubst < deployment/kubernetes/production/annotateai-production.yaml | kubectl apply -f -
        
        # Wait for new deployment to be ready
        kubectl rollout status deployment/api-gateway -n annotateai-prod --timeout=900s
        kubectl rollout status deployment/auth-service -n annotateai-prod --timeout=600s
        kubectl rollout status deployment/ai-model-service -n annotateai-prod --timeout=900s
        kubectl rollout status deployment/collaboration-service -n annotateai-prod --timeout=600s
        kubectl rollout status deployment/storage-service -n annotateai-prod --timeout=600s

    - name: Run production health checks
      run: |
        # Wait for services to be fully ready
        sleep 120
        
        # Run comprehensive health checks
        python tests/health_checks.py --environment production --comprehensive
        
        # Run smoke tests
        python tests/smoke_tests.py --environment production

    - name: Update monitoring and alerting
      run: |
        # Update Grafana dashboards
        curl -X POST -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -d @deployment/monitoring/grafana-dashboard.json \
          https://grafana.annotateai.com/api/dashboards/db
        
        # Update alert rules
        kubectl apply -f deployment/monitoring/alert-rules.yml

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ AnnotateAI ${{ github.ref }} successfully deployed to production!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name annotateai-production

    - name: Rollback deployment
      run: |
        # Rollback all deployments to previous version
        kubectl rollout undo deployment/api-gateway -n annotateai-prod
        kubectl rollout undo deployment/auth-service -n annotateai-prod
        kubectl rollout undo deployment/ai-model-service -n annotateai-prod
        kubectl rollout undo deployment/collaboration-service -n annotateai-prod
        kubectl rollout undo deployment/storage-service -n annotateai-prod
        
        # Wait for rollback to complete
        kubectl rollout status deployment/api-gateway -n annotateai-prod --timeout=600s

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "🚨 AnnotateAI deployment failed! Rolled back to previous version."
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
    - name: Monitor for 10 minutes
      run: |
        # Monitor key metrics for 10 minutes after deployment
        for i in {1..10}; do
          echo "Monitoring round $i/10..."
          
          # Check error rates
          ERROR_RATE=$(curl -s "https://api.annotateai.com/metrics" | grep error_rate | awk '{print $2}')
          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "High error rate detected: $ERROR_RATE"
            exit 1
          fi
          
          # Check response times
          RESPONSE_TIME=$(curl -s "https://api.annotateai.com/metrics" | grep response_time_p95 | awk '{print $2}')
          if (( $(echo "$RESPONSE_TIME > 2000" | bc -l) )); then
            echo "High response time detected: $RESPONSE_TIME ms"
            exit 1
          fi
          
          sleep 60
        done
        
        echo "All metrics within acceptable ranges ✅"

    - name: Create deployment record
      run: |
        # Record successful deployment
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{
            "version": "${{ github.ref }}",
            "commit": "${{ github.sha }}",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "status": "success",
            "environment": "production"
          }' \
          "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}"

  # Generate release notes
  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Deployment Information
          
          - **Environment**: Production
          - **Deployed at**: ${{ steps.date.outputs.date }}
          - **Commit**: ${{ github.sha }}
          
          ## Verification
          
          - ✅ All tests passed
          - ✅ Security scans completed
          - ✅ Performance tests passed
          - ✅ Staging deployment verified
          - ✅ Production health checks passed
          
          ## Monitoring
          
          - [Production Dashboard](https://grafana.annotateai.com/d/production)
          - [Error Tracking](https://sentry.annotateai.com)
          - [Performance Metrics](https://newrelic.annotateai.com)
        draft: false
        prerelease: false 