# Production Dockerfile for AnnotateAI Platform
# Multi-stage build for optimized production deployment

# ======================================
# Stage 1: Dependencies
# ======================================
FROM node:18-alpine AS deps
LABEL maintainer="AnnotateAI Team <dev@annotateai.com>"
LABEL description="AnnotateAI Platform - Production Build"
LABEL version="1.0.0"

# Install security updates and required packages
RUN apk add --no-cache \
    libc6-compat \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./
COPY pnpm-lock.yaml* ./

# Install dependencies
RUN npm ci --only=production --ignore-scripts \
    && npm cache clean --force

# ======================================
# Stage 2: Builder
# ======================================
FROM node:18-alpine AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build environment variables
ARG NODE_ENV=production
ARG NEXT_PUBLIC_APP_VERSION
ARG NEXT_PUBLIC_SENTRY_DSN
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_WS_URL

ENV NODE_ENV=production
ENV NEXT_PUBLIC_APP_VERSION=${NEXT_PUBLIC_APP_VERSION}
ENV NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}

# Build application
RUN npm run build

# ======================================
# Stage 3: Production Runtime
# ======================================
FROM node:18-alpine AS runner

# Install security updates and runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    tini \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/temp \
    && chown -R nextjs:nodejs /app/logs /app/uploads /app/temp

# Health check
COPY --chown=nextjs:nodejs healthcheck.js ./
RUN chmod +x healthcheck.js

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node healthcheck.js || exit 1

# Security: Remove write permissions from app directory
RUN chmod -R 755 /app \
    && chmod 644 /app/server.js

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set resource limits (can be overridden by orchestrator)
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Use tini as init system for proper signal handling
ENTRYPOINT ["tini", "--"]

# Start application
CMD ["dumb-init", "node", "server.js"]

# ======================================
# Production Configuration Labels
# ======================================
LABEL org.opencontainers.image.title="AnnotateAI Platform"
LABEL org.opencontainers.image.description="AI-powered annotation platform for computer vision"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="AnnotateAI"
LABEL org.opencontainers.image.licenses="Proprietary"
LABEL org.opencontainers.image.source="https://github.com/annotateai/platform"
LABEL org.opencontainers.image.documentation="https://docs.annotateai.com"

# Security labels
LABEL security.non-root="true"
LABEL security.hardened="true"
LABEL security.scanned="true"

# Deployment labels
LABEL deployment.tier="production"
LABEL deployment.component="frontend"
LABEL deployment.scaling="horizontal" 