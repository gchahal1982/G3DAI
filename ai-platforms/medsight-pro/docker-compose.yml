# MedSight Pro - Docker Compose Configuration
# Medical Imaging & AI Analysis Platform
# HIPAA-compliant multi-service deployment

version: '3.8'

networks:
  medsight-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  medical-secure:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  dicom-storage:
    driver: local
  orthanc-data:
    driver: local
  medsight-logs:
    driver: local
  ai-models:
    driver: local
  medical-backups:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # ===========================================================================
  # Core Database Services
  # ===========================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: medsight-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: medsight_prod
      POSTGRES_USER: medsight_app
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - medical-secure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medsight_app -d medsight_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: medsight-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - medical-secure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # ===========================================================================
  # DICOM and Medical Imaging Services
  # ===========================================================================
  
  orthanc:
    image: osimis/orthanc:22.12.0
    container_name: medsight-orthanc
    restart: unless-stopped
    environment:
      ORTHANC__NAME: "MedSight DICOM Server"
      ORTHANC__AUTHENTICATION_ENABLED: "true"
      ORTHANC__REGISTERED_USERS: '{"medsight": "SecurePassword123!"}'
      ORTHANC__HTTP_PORT: 8042
      ORTHANC__DICOM_PORT: 104
      ORTHANC__DICOM_AET: "MEDSIGHT"
      ORTHANC__REMOTE_ACCESS_ALLOWED: "true"
      ORTHANC__HTTP_COMPRESSION: "true"
      ORTHANC__STORAGE_COMPRESSION: "true"
      ORTHANC__MAXIMUM_PATIENT_COUNT: 10000
      ORTHANC__MAXIMUM_STORAGE_SIZE: 0
      ORTHANC__STABLE_AGE: 60
    volumes:
      - orthanc-data:/var/lib/orthanc/db
      - dicom-storage:/opt/medsight/dicom-storage
      - ./docker/orthanc/orthanc.json:/etc/orthanc/orthanc.json
    ports:
      - "8042:8042"  # HTTP interface
      - "104:104"    # DICOM communication
    networks:
      - medsight-network
      - medical-secure
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042/system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # Main Application Services
  # ===========================================================================
  
  medsight-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: medsight-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://medsight_app:${DB_PASSWORD:-SecurePassword123!}@postgres:5432/medsight_prod
      REDIS_URL: redis://redis:6379
      ORTHANC_URL: http://orthanc:8042
      ORTHANC_USERNAME: medsight
      ORTHANC_PASSWORD: ${ORTHANC_PASSWORD:-SecurePassword123!}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-32-character-encryption-key}
      HIPAA_COMPLIANCE_MODE: "true"
      FDA_VALIDATION_MODE: "true"
      AUDIT_LOG_ENABLED: "true"
      AI_SERVICE_URL: http://medsight-ai:5000
      DICOM_SERVER_HOST: orthanc
      DICOM_SERVER_PORT: 104
    volumes:
      - dicom-storage:/opt/medsight/dicom-storage:ro
      - medsight-logs:/opt/medsight/logs
      - medical-backups:/opt/medsight/backups
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"
    networks:
      - medsight-network
      - medical-secure
    depends_on:
      - postgres
      - redis
      - orthanc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  medsight-ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: ai-service
    container_name: medsight-ai
    restart: unless-stopped
    environment:
      PYTHONPATH: /app/src
      AI_SERVICE_MODE: "true"
      DATABASE_URL: postgresql://medsight_app:${DB_PASSWORD:-SecurePassword123!}@postgres:5432/medsight_prod
      REDIS_URL: redis://redis:6379
      AI_MODEL_PATH: /opt/medsight/models
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-}
      AI_BATCH_SIZE: ${AI_BATCH_SIZE:-4}
      AI_MAX_WORKERS: ${AI_MAX_WORKERS:-2}
    volumes:
      - ai-models:/opt/medsight/models
      - dicom-storage:/opt/medsight/dicom-storage:ro
      - medsight-logs:/opt/medsight/logs
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "5000:5000"
    networks:
      - medical-secure
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    security_opt:
      - no-new-privileges:true

  # ===========================================================================
  # Monitoring and Observability
  # ===========================================================================
  
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: medsight-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - medsight-network
    depends_on:
      - medsight-app
      - medsight-ai
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:10.1.0
    container_name: medsight-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SERVER_DOMAIN: monitoring.medsight.local
      GF_SERVER_ROOT_URL: http://monitoring.medsight.local:3001
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - medsight-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  # ===========================================================================
  # Medical Compliance and Security Services
  # ===========================================================================
  
  audit-logger:
    image: fluent/fluent-bit:2.1.10
    container_name: medsight-audit
    restart: unless-stopped
    volumes:
      - ./docker/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - medsight-logs:/opt/medsight/logs:ro
      - /var/log:/var/log:ro
    networks:
      - medical-secure
    depends_on:
      - medsight-app
    security_opt:
      - no-new-privileges:true

  backup-service:
    image: alpine:3.18
    container_name: medsight-backup
    restart: unless-stopped
    environment:
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      POSTGRES_HOST: postgres
      POSTGRES_DB: medsight_prod
      POSTGRES_USER: medsight_app
      POSTGRES_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
    volumes:
      - medical-backups:/backups
      - dicom-storage:/opt/medsight/dicom-storage:ro
      - ./docker/backup/backup.sh:/usr/local/bin/backup.sh
    networks:
      - medical-secure
    depends_on:
      - postgres
      - orthanc
    command: ["sh", "-c", "while true; do sleep 86400; /usr/local/bin/backup.sh; done"]
    security_opt:
      - no-new-privileges:true

  # ===========================================================================
  # Load Balancer and Reverse Proxy
  # ===========================================================================
  
  nginx:
    image: nginx:1.25-alpine
    container_name: medsight-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
      - medsight-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - medsight-network
    depends_on:
      - medsight-app
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # ===========================================================================
  # Development and Testing Services (commented out for production)
  # ===========================================================================
  
  # adminer:
  #   image: adminer:4.8.1
  #   container_name: medsight-adminer
  #   restart: unless-stopped
  #   environment:
  #     ADMINER_DESIGN: pepa-linha
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - medical-secure
  #   depends_on:
  #     - postgres

  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: medsight-redis-commander
  #   restart: unless-stopped
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - medical-secure
  #   depends_on:
  #     - redis

# ===========================================================================
# Additional Configuration
# ===========================================================================

# Environment variables can be set in .env file:
# DB_PASSWORD=your_secure_password
# JWT_SECRET=your_jwt_secret
# ENCRYPTION_KEY=your_encryption_key
# ORTHANC_PASSWORD=your_orthanc_password
# GRAFANA_PASSWORD=your_grafana_password
# CUDA_VISIBLE_DEVICES=0
# AI_BATCH_SIZE=4
# AI_MAX_WORKERS=2

# Usage Commands:
# docker-compose up -d                    # Start all services
# docker-compose up -d medsight-app       # Start specific service
# docker-compose down                     # Stop all services
# docker-compose logs -f medsight-app     # View logs
# docker-compose exec medsight-app bash   # Access container
# docker-compose pull                     # Update images
# docker-compose restart medsight-app     # Restart service 